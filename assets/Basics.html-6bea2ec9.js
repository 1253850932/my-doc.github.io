import{_ as n,X as s,Y as a,a2 as t}from"./framework-ed357a39.js";const e={},p=t(`<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="数据类型分类" tabindex="-1"><a class="header-anchor" href="#数据类型分类" aria-hidden="true">#</a> 数据类型分类</h3><blockquote><p>基本数据类型</p></blockquote><ul><li>String：字符串类型。用&quot;&quot;和&#39;&#39;包裹的内容，称为字符串。</li><li>Number：数值类型。可以是小数，也可以是正数。</li><li>boolean：真假，可选值 true/false。</li><li>Null：表示为空的引用。var a = null;</li><li>Undefined：未定义，用 var 声明的变量，没有进行初始化赋值。var a;</li><li>BigInt: 大小为 64 位的双精度数字格式 ES10 新增</li><li>Symbol: 表示唯一标识符，ES6 新.</li></ul><blockquote><p>引用数据类型</p></blockquote><ul><li>Object：（复杂数据类型）</li></ul><h3 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h3><ul><li>typeof 操作符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 变量的类型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">//number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span> <span class="token comment">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1122</span><span class="token punctuation">)</span> <span class="token comment">//number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">//undefined</span>

<span class="token comment">//typeof --&gt; object  array  function</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token number">15</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn<span class="token punctuation">)</span> <span class="token comment">// function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>instanceof 操作符</li></ul><div class="hint-container info"><p class="hint-container-title">instanceof</p><p>instanceof 用来判断一个引用类型属于哪种类型（不能用于值类型的判断）</p><p>instanceof 返回值是布尔值，成立返回 true，不成立 false，千万不能用于值类型的判断，因为返回都是 false</p><p>判断引用类型 -&gt; object<br> 值类型 -&gt; string、number、boolean、null、undefined</p><p>语法：==&gt; 变量 instanceof 某个引用数据类型</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// false</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><h4 id="string-变量-强转" tabindex="-1"><a class="header-anchor" href="#string-变量-强转" aria-hidden="true">#</a> String（变量）--强转</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> 将变量转换成字符串类型 强转

<span class="token keyword">var</span> bol <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bol<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>bol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span>bol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> un <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>un<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span>un<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> ud <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>ud<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span>ud<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="number-变量-强转" tabindex="-1"><a class="header-anchor" href="#number-变量-强转" aria-hidden="true">#</a> Number(变量)--强转</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token function">将变量转换成数字类型</span><span class="token punctuation">(</span>强转<span class="token punctuation">)</span>
<span class="token literal-property property">Number字符串转数字类型时</span><span class="token operator">:</span>
纯数字字符串 <span class="token string">&quot;123&quot;</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">123</span>
空字符串 <span class="token string">&quot;&quot;</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token keyword">null</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token boolean">true</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token boolean">false</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">0</span>
其它的都是 <span class="token number">NaN</span> ，包括 <span class="token keyword">undefined</span> 都是 <span class="token number">NaN</span>

<span class="token function">parseInt</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token function">将变量转换成整数类型</span><span class="token punctuation">(</span>数字类型<span class="token punctuation">)</span><span class="token punctuation">(</span>强转<span class="token punctuation">)</span>
parseInt字符串转数字类型时，只有纯数字字符串类型或首字母是数字才能转换成数字类型，其它的都是 <span class="token number">NaN</span><span class="token punctuation">,</span>将小数抹掉
<span class="token string">&quot;123.111asds&quot;</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">123</span>

<span class="token function">parseFloat</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token function">将变量转换成浮点类型</span><span class="token punctuation">(</span>数字类型<span class="token punctuation">)</span><span class="token punctuation">(</span>强转<span class="token punctuation">)</span>
parseFloat字符串转数字类型时，只有纯数字字符串类型或首字母是数字才能转换成数字类型，其它的都是 <span class="token number">NaN</span><span class="token punctuation">,</span>将小数保留
<span class="token string">&quot;123.111asds&quot;</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token number">123.111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="boolean-变量-强转" tabindex="-1"><a class="header-anchor" href="#boolean-变量-强转" aria-hidden="true">#</a> Boolean(变量)--强转</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>：将变量转换成布尔类型

<span class="token literal-property property">口诀</span><span class="token operator">:</span> 非空即真<span class="token punctuation">,</span>非<span class="token number">0</span>即真，非<span class="token keyword">null</span>非<span class="token keyword">undefined</span>即真
空假 <span class="token number">0</span>假 <span class="token keyword">null</span>假 <span class="token keyword">undefined</span>假

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;119&quot;</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;嘿嘿嘿&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;abab左右左右&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;abab123&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;123abab&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;ab123ab&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>     <span class="token comment">//  false</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;  &quot;</span><span class="token punctuation">;</span>   <span class="token comment">//  true</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注：1.字符串类型转布尔值：非空即真</span>
<span class="token comment">// 注：2.数字类型转布尔值：非0即真</span>
<span class="token comment">// 注：3.null转布尔值：false</span>
<span class="token comment">// 注：4.undefined转布尔值：false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换" aria-hidden="true">#</a> 隐式转换</h3><div class="hint-container info"><p class="hint-container-title">隐式转换</p><p>不同类型的变量比较要先转换类型，叫做类型转换，类型转换也叫隐式转换。</p><p>隐式转换通常发生在运算符做加、减、乘、除、大于、小于、等于等。</p><p>&quot;JS 中一个字符串中只有纯数字，如果该字符串前面加了加号或减号，这个数值就变成了 number 类型。&quot;</p><p>&quot;对象转布尔型是 true,数组属于对象类型，所以数组转换成布尔型还是 true&quot;</p><p>1.空数组[]和空对象{}都是 object 类型，因此直接用于 if 判断条件时就会被转化为 true。</p><p>2.任意值与布尔值比较，都会将两边的值转化为 Number,true 转 1，false 转 0</p><p>--空数组[]与布尔值比较转化为 number 类型，值为 0</p><p>--空对象{}与布尔值比较转化为 number 类型，值为 0</p><p>--空对象{}与布尔值比较转化为 number 类型，值为 NaN，NaN 与任何数不相等</p><p>3.函数与布尔值比较转化为 number 类型，值为 NaN</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>隐式转换 通常发生在两个值做比较的时候

<span class="token number">1.</span> <span class="token operator">==</span>  <span class="token operator">===</span> 隐式转换  转换规则：

<span class="token number">1.1</span>  字符串和数字比较时<span class="token punctuation">,</span>字符串换数字
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span> <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  true</span>

<span class="token number">1.2</span> 数字和布尔比较时<span class="token punctuation">,</span>布尔转数字，<span class="token boolean">true</span>转<span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">false</span>转<span class="token number">0</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token number">1.3</span> 字符串和布尔比较时<span class="token punctuation">,</span>两者转数字
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token number">1.4</span> 对象和布尔比较时，两者转数字

<span class="token number">1.5</span> 对象和数字比较，对象转数字

特殊情况
<span class="token number">1.6</span> <span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">,</span>它们比较时，都是转成Boolean再比较
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token number">1.7</span> 只有<span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span>会被转换成<span class="token boolean">false</span>，其余都为<span class="token boolean">true</span>

<span class="token number">1.8</span> <span class="token number">NaN</span>和任何值都不相等<span class="token punctuation">,</span>包括<span class="token number">NaN</span>本身；
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>

<span class="token number">1.9</span> 其它的类型 与 <span class="token keyword">null</span>和 <span class="token keyword">undefined</span>在进行比较的时候，不会进行类型转换
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>


<span class="token number">2.</span> 算术运算  隐式转换  转换规则：

<span class="token number">2.1</span> 字符串加数字（或数字加字符串）<span class="token punctuation">,</span>数字会转成字符串
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span> <span class="token operator">+</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa111</span>

<span class="token number">2.2</span> 数字减字符串（或字符串减数字，或字符串减字符串），字符串转成数字，如果字符串不是纯数字就会转成<span class="token number">NaN</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span> <span class="token operator">-</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// NaN</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;222&quot;</span> <span class="token operator">-</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 111</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;2q2q2q&quot;</span> <span class="token operator">-</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token number">2.3</span> 减、乘、除、大于、小于运算时都会变成数字，再运算，如果字符串不是纯数字就会转成<span class="token number">NaN</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;2025年&quot;</span> <span class="token operator">-</span> <span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>

<span class="token number">2.4</span> 除了 数字 <span class="token operator">+</span> 数字<span class="token punctuation">,</span> <span class="token string">&quot;+&quot;</span>号会变成运算符，其它情况下都会变成连接符，拼接成字符串
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;hr /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span> <span class="token operator">+</span> <span class="token number">11111111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-的运算符" tabindex="-1"><a class="header-anchor" href="#js-的运算符" aria-hidden="true">#</a> js 的运算符</h2><h3 id="_1、赋值运算符" tabindex="-1"><a class="header-anchor" href="#_1、赋值运算符" aria-hidden="true">#</a> 1、赋值运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>在js中，赋值运算符的符号为（<span class="token operator">=</span>  等号），比如：表达式  <span class="token keyword">var</span>  a <span class="token operator">=</span> <span class="token number">10</span>，表示将值<span class="token number">10</span>赋值给变量 a

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 将数字10赋值给变量a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、算术运算符" tabindex="-1"><a class="header-anchor" href="#_2、算术运算符" aria-hidden="true">#</a> 2、算术运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>加（<span class="token operator">+</span>）、减（<span class="token operator">-</span>）、乘（<span class="token operator">*</span>）、除（<span class="token operator">/</span><span class="token function">）、余</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、比较运算符" tabindex="-1"><a class="header-anchor" href="#_3、比较运算符" aria-hidden="true">#</a> 3、比较运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>大于（<span class="token operator">&gt;</span>）

小于（<span class="token operator">&lt;</span>）

大于等于（<span class="token operator">&gt;=</span>）

小于等于（<span class="token operator">&lt;=</span>）

双等于（<span class="token operator">==</span>）

完全等于（<span class="token operator">===</span>）

不等于（<span class="token operator">!=</span>）

完全不等于（<span class="token operator">!==</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_4、逻辑运算符" aria-hidden="true">#</a> 4、逻辑运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>与 <span class="token operator">&amp;&amp;</span>  <span class="token operator">--</span>  （两个条件都必须成立）

<span class="token operator">--</span>假假得假，真假得假，真真得真
特点：有一个值为假，即为假，取离变量最近的一个为假得值，如果都为真，取离变量最远的一个为真的值。
<span class="token operator">--</span>与真远，与假近
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>或<span class="token operator">||</span> <span class="token operator">--</span>  （两个条件有一个成立就成立）

<span class="token operator">--</span>假假得假，真假得真，真真得真
特点：有一个值为真，即为真，取离变量最近的一个为真得值，如果都为假，取离变量最远的一个为假的值。
<span class="token operator">--</span>或真近，或假远
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>非 <span class="token operator">!</span>  <span class="token operator">--</span>  取反

取值得反
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>逻辑运算符优先级

<span class="token operator">/</span>非 ！<span class="token operator">&gt;</span> 与 <span class="token operator">&amp;&amp;</span> <span class="token operator">&gt;</span> 或 <span class="token operator">||</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、一元运算符" tabindex="-1"><a class="header-anchor" href="#_5、一元运算符" aria-hidden="true">#</a> 5、一元运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>自增  <span class="token operator">++</span>  自减  <span class="token operator">--</span>

<span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token number">1.</span><span class="token operator">++</span>或<span class="token operator">--</span> 在后<span class="token punctuation">,</span>先赋值再运算
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>

<span class="token number">2.</span><span class="token operator">++</span>或<span class="token operator">--</span> 在前<span class="token punctuation">,</span> 先运算再赋值
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>

据统计 <span class="token operator">++</span>或<span class="token operator">--</span>在前性能比在后高
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、二元运算符" tabindex="-1"><a class="header-anchor" href="#_6、二元运算符" aria-hidden="true">#</a> 6、二元运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>累加器  <span class="token operator">+=</span>  累减器 <span class="token operator">-=</span>  累乘器 <span class="token operator">*=</span>   累除器 <span class="token operator">/=</span> 累余器 <span class="token operator">%=</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

a <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// a = a + 10;</span>
a <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// a = a - 10;</span>
a <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// a = a * 10;</span>
a <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// a = a / 10;</span>
a <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// a = a % 10;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、三元运算符" tabindex="-1"><a class="header-anchor" href="#_7、三元运算符" aria-hidden="true">#</a> 7、三元运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>在js中，也称为三元表达式（或三目运算）

如果条件为真返回值<span class="token number">1</span>，如果条件为假返回值<span class="token number">2</span>

条件表达<span class="token operator">?</span>值<span class="token number">1</span><span class="token operator">:</span>值<span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;条件为真&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;条件为假&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 小于10,前面补0，利用三目运算处理</span>
<span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>
  m <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span>
  s <span class="token operator">=</span> <span class="token number">17</span>
h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> h <span class="token operator">:</span> h
m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> m <span class="token operator">:</span> m
s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> s <span class="token operator">:</span> s
<span class="token keyword">var</span> time <span class="token operator">=</span> h <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> s
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-流程控制语句" tabindex="-1"><a class="header-anchor" href="#js-流程控制语句" aria-hidden="true">#</a> js 流程控制语句</h2><h3 id="条件语句和循环语句" tabindex="-1"><a class="header-anchor" href="#条件语句和循环语句" aria-hidden="true">#</a> 条件语句和循环语句</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a is 1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a is 2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a is neither 1 nor 2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token number">5</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;我被执行了！&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;我被放弃了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// switch选择语句:</span>
key：固定值   value：固定值
key 找到 value 然后执 行value 的代码块

<span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token literal-property property">value</span><span class="token operator">:</span>
    代码块一
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> <span class="token literal-property property">value</span><span class="token operator">:</span>
    代码块二
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> <span class="token literal-property property">value</span><span class="token operator">:</span>
    代码块三
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> <span class="token literal-property property">value</span><span class="token operator">:</span>
    代码块四
    <span class="token keyword">break</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    以上都不符合条件执行的代码块
    <span class="token keyword">break</span>
<span class="token punctuation">}</span>


<span class="token comment">// 循环语句</span>
<span class="token keyword">continue</span> <span class="token operator">--</span><span class="token operator">&gt;</span> 跳出本次循环<span class="token punctuation">,</span>执行下一次循环<span class="token punctuation">,</span> <span class="token keyword">continue</span> 后的语句不会执行
<span class="token keyword">break</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token keyword">break</span> 用于完全结束一个循环
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环体语句</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 越过本次循环，继续下一次循环</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;&lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环体语句</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 跳出整个循环，循环结束</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;&lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// while(表达式)，只要表达式为真，即可进入循环， while(true) 是著名的死循环</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// do while循环</span>
<span class="token keyword">do</span> <span class="token keyword">while</span> 和 <span class="token keyword">while</span> 循环大同小异，只是语法格式稍有不同，不同点在于 <span class="token keyword">while</span> 里面的表达式不管成立不成立，都会执行一次 <span class="token keyword">do</span> 里面的代码

<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;不管你信不信，我肯定会执行一次&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    j<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><h3 id="拼接" tabindex="-1"><a class="header-anchor" href="#拼接" aria-hidden="true">#</a> 拼接</h3><h4 id="号" tabindex="-1"><a class="header-anchor" href="#号" aria-hidden="true">#</a> <code>+</code> 号</h4><blockquote><p>任何其它类型 &quot;+&quot; 字符串，都会拼接成字符串</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>

<span class="token comment">//&quot;+&quot;号拼接</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> str1 <span class="token operator">+</span> <span class="token string">&#39;\\t&#39;</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">&#39;\\t&#39;</span> <span class="token operator">+</span> str3
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// Hello	world	world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="concat" tabindex="-1"><a class="header-anchor" href="#concat" aria-hidden="true">#</a> concat()</h4><blockquote><p>拼接多个字符串，concat()方法可以有多个参数，传递多个字符串，语法格式.也可以拼接数组</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>

<span class="token comment">//concat()方法拼接</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> str3<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><h4 id="indexof" tabindex="-1"><a class="header-anchor" href="#indexof" aria-hidden="true">#</a> indexOf()</h4><blockquote><p>从前往后进行检索，返回字符串中指定文本首次出现的索引，查不到指定的文本，返回 -1</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>

document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 从索引4开始查找&quot;o&quot;,返回&quot;o&quot;的索引4</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 从索引5开始查找&quot;o&quot;,返回&quot;o&quot;的索引7</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 从索引8开始查找&quot;o&quot;,找不到返回-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lastindexof" tabindex="-1"><a class="header-anchor" href="#lastindexof" aria-hidden="true">#</a> lastIndexOf()</h4><blockquote><p>从后往前进行检索，返回字符串中指定文本首次出现的索引，查不到指定的文本，返回 -1</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>

<span class="token keyword">var</span> str1 <span class="token operator">=</span>
  <span class="token string">&#39;可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。&#39;</span>
<span class="token comment">//str1的索引12开始查找&quot;字符串&quot;,找到后返回找到的&quot;字符串&quot;中的&quot;字&quot;的索引69</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;字符串&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search()</h4><blockquote><p>从前往后进行检索，返回字符串中指定文本首次出现的索引，查不到指定的文本，返回 -</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">indexOf()和 search()的区别</p><p>search()方法无法设置第二个参数--可以用于正则表达式</p><p>indexOf()方法无法设置更强大的搜索值--不能用于正则表达式</p></div><h4 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match()</h4><div class="hint-container info"><p class="hint-container-title">match()</p><p>在字符串内检索指定的值，或者找到一个或者多个正则表达式的匹配，返回一个数组。</p><p>该数组的第 0 个元素存放的是匹配的文本，除此之外，返回的数组还含有两个对象属性，即 index 和 input，分别表示匹配的文本的起始字符索引（下标值）和字符串的引用（原始的字符串）。</p><p>查找不到指定的值，返回 null 。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>语法：

str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>searchvalue<span class="token punctuation">)</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span>

searchvalu <span class="token operator">--</span><span class="token operator">&gt;</span> 必需。规定需检索的字符串值。
regexp <span class="token operator">--</span><span class="token operator">&gt;</span> 必需。规定要匹配的模式的 RegExp 对象。
如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回第 0 个元素为&quot;o&quot;的数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提取字符" tabindex="-1"><a class="header-anchor" href="#提取字符" aria-hidden="true">#</a> 提取字符</h3><h4 id="charat" tabindex="-1"><a class="header-anchor" href="#charat" aria-hidden="true">#</a> charAt()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>方法：根据指定索引返回字符<span class="token punctuation">,</span>检索不到返回空字符串

<span class="token keyword">var</span>  str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// o</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="charcodeat" tabindex="-1"><a class="header-anchor" href="#charcodeat" aria-hidden="true">#</a> charCodeAt()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">charCodeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>方法：根据指定索引返回字符串的 unicode编码 <span class="token operator">-</span> <span class="token constant">ASCII</span>码，检索不到返回 <span class="token number">NaN</span>

<span class="token keyword">var</span>  str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 111 表示子字符串o的ASCII码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串截取" tabindex="-1"><a class="header-anchor" href="#字符串截取" aria-hidden="true">#</a> 字符串截取</h3><h4 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> slice()</h4><div class="hint-container info"><p class="hint-container-title">slice</p><p>&quot;字符串和数组通用截取&quot;，返回被截取的部分，不改变原字符串，截取不到返回空字符串</p><p>1.截取的文本包头不包尾（两个参数都有的情况下）</p><p>2.截取的方向永远是从左到右</p><p>3.如果参数负数，从尾部-1 开始计算(从右往左数)</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>语法：

strarr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>

start <span class="token operator">--</span><span class="token operator">&gt;</span> 可选。规定从何处开始选取，默认<span class="token number">0</span>。如果是负数，规定从右往左数第几个为开始。也就是说，<span class="token operator">-</span><span class="token number">1</span> 指最后一个元素，<span class="token operator">-</span><span class="token number">2</span> 指倒数第二个元素，以此类推。

end <span class="token operator">--</span><span class="token operator">&gt;</span> 可选。规定从何处结束选取。正数时，该参数是数组片断结束处的数组下标。负数时，规定从右往左数第几个为结束。如果没有指定该参数，默认数组尾部为结束
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="substring" tabindex="-1"><a class="header-anchor" href="#substring" aria-hidden="true">#</a> substring()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>只适用于字符串，返回被截取的部分，不改变原字符串，截取不到返回空字符串

<span class="token number">1.</span>截取的文本包头不包尾（两个参数都有的情况下）
<span class="token number">2.</span>截取的方向永远是从左到右
<span class="token number">3.</span>参数不支持负数，截取之前会比较两个参数的大小，并根据大小调整位置（两个参数互换位置）

语法：

str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>

不支持负的索引，如果是负值，相当于索引<span class="token number">0</span>。

<span class="token function">不同之处：在于substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>方法不支持负的索引，如果是负值，相当于索引<span class="token number">0</span>。

截取之前会比较两个参数的大小，并根据大小调整位置，大的在后面

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="substr" tabindex="-1"><a class="header-anchor" href="#substr" aria-hidden="true">#</a> substr()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>只适用于字符串，返回被截取的部分，不改变原字符串，截取不到返回空字符串

<span class="token number">1.</span>截取的方向永远是从左到右

<span class="token number">2.</span>第一个参数支持负数，第二个参数不支持负数

语法：

str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span>

length <span class="token operator">--</span><span class="token operator">&gt;</span> 被截取部分的长度，为<span class="token number">0</span>或为负数都截取不到返回空字符串
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h3><h4 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>只适用于字符串，用另一个值替换字符串中指定的值，不改变原字符串，返回新字符串

只替换字符串首次出现的子字符串，如果需要替换所有相同的字符串，第一个参数需要传入正则表达式

str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>被替换的旧字符串<span class="token operator">/</span>正则表达式<span class="token punctuation">,</span>要替换的新子字符串<span class="token punctuation">)</span>

<span class="token keyword">var</span>  str <span class="token operator">=</span> <span class="token string">&quot;Heololo worolod&quot;</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;hr /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//正则表达式</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;hr /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换大小写" tabindex="-1"><a class="header-anchor" href="#转换大小写" aria-hidden="true">#</a> 转换大小写</h3><ul><li><p><code>toUpperCase()</code>方法：把字符串中所有的小写字母转换成大写字母,返回大写字符串，不改变原字符串</p><p>str.toUpperCase()</p></li><li><p><code>toLowerCase()</code>方法：把字符串中所有的大写字母转换成小写字母，返回小写字符串，不改变原字符串</p><p>str.toLowerCase()</p></li></ul><h3 id="删除前后空白符" tabindex="-1"><a class="header-anchor" href="#删除前后空白符" aria-hidden="true">#</a> 删除前后空白符</h3><ul><li><p><code>trim()</code>：删除字符串两端(前后)的空白符，不改变原字符串</p></li><li><p><code>trimLeft()</code>：删除字符串左边的空白符，不改变原字符串</p></li><li><p><code>trimRight()</code>：删除字符串右边的空白符，不改变原字符串</p></li></ul><h3 id="分割为数组" tabindex="-1"><a class="header-anchor" href="#分割为数组" aria-hidden="true">#</a> 分割为数组</h3><p><code>split()</code>方法：将字符串分割为数组,采用去掉字符串中的字符的方式来将字符串分为数组并返回</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>

<span class="token number">1.</span>没有给值，返回单个字符串组成的数组
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;hello world&quot;]</span>

<span class="token number">2.</span>给个空值，返回由每个字符组成的数组
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</span>

<span class="token number">3.</span>采用去掉字符串中的字符的方式来将字符串分为数组并返回
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;hello&quot;, &quot;world&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;hell&quot;, &quot; w&quot;, &quot;rld&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><h3 id="增删查改数组" tabindex="-1"><a class="header-anchor" href="#增删查改数组" aria-hidden="true">#</a> 增删查改数组</h3><blockquote><p>改变原数组</p></blockquote><ul><li><p><code>pop()</code> 尾部删除元素</p></li><li><p><code>push()</code> 末尾添加元素</p></li><li><p><code>unshift()</code> 前面添加元素</p></li><li><p><code>shift()</code> 头部删除元素</p></li><li><p><code>splice()</code> 从指定的位置前面插入或修改指定的元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>删除元素的索引位置，删除元素的个数，元素<span class="token number">1</span>，元素<span class="token number">2</span>，<span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token number">1.</span>第一个参数支持负数，第二个参数不支持负数，包头包尾
<span class="token number">2.</span>默认在索引对应的元素前面插入
<span class="token number">3.</span>插入元素<span class="token operator">--</span>删除的元素的个数为<span class="token number">0</span>，表示插入元素
<span class="token number">4.</span>替换元素<span class="token operator">--</span>删除的元素的个数为<span class="token number">1</span>，表示替换元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>indexOf()</code> 从前往后进行检索，返回数组中指定元素首次出现的索引，查不到指定的文本，返回 -1</p></li><li><p><code>lastIndexOf()</code> 从后往前进行检索，返回数组中指定元素首次出现的索引，查不到指定的文本，返回 -1</p></li><li><p><code>concat()</code> 将多个数组连接成一个新的数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;v&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>

<span class="token comment">//arr1,arr2,arr3合并成一个数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>slice()</code> 截取元素 - 返回截取原数组中指定的元素组成的新数组 -- 不会改变原来的数组</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>语法格式：

arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token number">1</span><span class="token punctuation">.</span>start 必需。规定从何处开始截取，支持负数

<span class="token number">2</span><span class="token punctuation">.</span>end 	可选。规定从何处结束截取，支持负数。如果没有参数，则往后截到尾才结束

<span class="token number">3.</span>特点是：包头不包尾（两个参数都有的情况下）

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;H&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;l&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;l&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [&quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;l&quot;, &quot;l&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;l&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组转字符串" tabindex="-1"><a class="header-anchor" href="#数组转字符串" aria-hidden="true">#</a> 数组转字符串</h3><ul><li><code>toString()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//H,e,l,l,o</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>join()</code> 将数组中的元素合成一个用指定的分隔符号拼接的字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>语法格式：

arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>分隔符<span class="token punctuation">)</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;H&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;l&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;l&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">1</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H,e,l,l,o   		不给值，默认&quot;,&quot;为分隔符</span>
<span class="token number">2</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello			分隔符为空</span>
<span class="token number">3</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H e l l o	 	分隔符为空字符串</span>
<span class="token number">4</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H-e-l-l-o		分隔符为&quot;-&quot;</span>
<span class="token number">5</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H,e,l,l,o		分隔符为&quot;,&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组倒序" tabindex="-1"><a class="header-anchor" href="#数组倒序" aria-hidden="true">#</a> 数组倒序</h3><h4 id="reverse-方法" tabindex="-1"><a class="header-anchor" href="#reverse-方法" aria-hidden="true">#</a> reverse()方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>将数组中的元素倒序排列，而且直接改变原来的数组，不会创建新的数组

语法： arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;o&quot;, &quot;l&quot;, &quot;l&quot;, &quot;e&quot;, &quot;H&quot;]</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>

<span class="token keyword">var</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token comment">// dlrow olleH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组排序" tabindex="-1"><a class="header-anchor" href="#数组排序" aria-hidden="true">#</a> 数组排序</h3><p><code>sort()</code> 将数组的元素进行排序（按照 ASCII 码排序） -- 不改变原数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>语法格式如下：

arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortby<span class="token punctuation">)</span>

sortby 可选。规定排序顺序。必须是函数。不选，默认按照<span class="token constant">ASCII</span>码从小到大排序

arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token comment">// 表示从小到大排序的</span>
    <span class="token keyword">return</span> b <span class="token operator">-</span> a  <span class="token comment">// 表示从大到小排序的</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


如果想按照其他标准进行排序，就需要提供比较函数，该函数需要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字，比较函数应该具有两个参数，默认a，b<span class="token punctuation">,</span>其返回值如下：

若 a <span class="token operator">&lt;</span> b <span class="token punctuation">,</span>在排序后的数组中 a 应该出现在 b 之前，则返回一个小于<span class="token number">0</span>的值
若 a <span class="token operator">=</span> b <span class="token punctuation">,</span>在排序后的数组中 a 应该出现在 b 之前，则返回一个<span class="token number">0</span>的值
若 a <span class="token operator">&gt;</span> b <span class="token punctuation">,</span>在排序后的数组中 a 应该出现在 b 之后，则返回一个大于<span class="token number">0</span>的值


<span class="token comment">// 默认按照ASCII码从小到大排序</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;101&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;102&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;110&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;103&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 有参数和无参数的区别</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b <span class="token operator">-</span> a <span class="token comment">// 表示从大到小排序的</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token comment">// 表示从小到大排序的</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><blockquote><p>对象没有 length 属性</p></blockquote><h3 id="增加属性" tabindex="-1"><a class="header-anchor" href="#增加属性" aria-hidden="true">#</a> 增加属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>为已存在的对象添加属性

<span class="token comment">// obj.属性 = &quot;值&quot;  有层叠性</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>

<span class="token comment">// obj[属性] = &quot;值&quot;      这种形式的属性只能是字符串的类型</span>
<span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">&#39;color&#39;</span>
obj<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;182cm&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除属性" tabindex="-1"><a class="header-anchor" href="#删除属性" aria-hidden="true">#</a> 删除属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>为已存在的对象删除属性

<span class="token comment">//delete可以删除对象的属性</span>
<span class="token comment">//delete obj.属性;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检测属性" tabindex="-1"><a class="header-anchor" href="#检测属性" aria-hidden="true">#</a> 检测属性</h3><h4 id="in-运算符" tabindex="-1"><a class="header-anchor" href="#in-运算符" aria-hidden="true">#</a> in 运算符</h4><blockquote><p>in 运算符左侧是属性名，右侧是对象，如果对象的自有属性或继承属性中包含这个数值则返回 true 反之返回 false</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;爷&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// in连接，if判断</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;obj有这个属性&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;obj没有这个属性&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hasownproperty" tabindex="-1"><a class="header-anchor" href="#hasownproperty" aria-hidden="true">#</a> hasOwnProperty()</h4><blockquote><p>检测该属性在对象中是否存在，需要注意的是，这个方法只能判断是不是对象的自有属性，无法判断继承属性</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//obj.hasOwnProperty(&quot;属性名&quot;)</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="propertyisenumerable" tabindex="-1"><a class="header-anchor" href="#propertyisenumerable" aria-hidden="true">#</a> propertyIsEnumerable()</h4><blockquote><p>检测传入的值是否是自有属性并且可枚举时才会返回 true，内置属性不可枚举</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//obj.propertyEnumerable(属性名)</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象的遍历" tabindex="-1"><a class="header-anchor" href="#对象的遍历" aria-hidden="true">#</a> 对象的遍历</h3><h4 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in" aria-hidden="true">#</a> for in</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;for in循环&#39;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token function-variable function">chi</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cai</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;马上吃中饭，点个&#39;</span> <span class="token operator">+</span> cai<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// for...in</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// i		表示Key----属性名(类似下标)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// obj[i]	表示value--属性值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&#39;：&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-entries-keys-values" tabindex="-1"><a class="header-anchor" href="#object-entries-keys-values" aria-hidden="true">#</a> Object.entries() - keys() - values()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token function-variable function">chi</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cai</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;马上吃中饭，点个&#39;</span> <span class="token operator">+</span> cai<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// name lisi</span>
<span class="token comment">// age 50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="date-对象" tabindex="-1"><a class="header-anchor" href="#date-对象" aria-hidden="true">#</a> Date 对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>一月	January
二月	February
三月	March
四月	April
五月	May
六月	June
七月	July
八月	August
九月	September
十月	October
十一月	November
十二月	December
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建日期对象" tabindex="-1"><a class="header-anchor" href="#创建日期对象" aria-hidden="true">#</a> 创建日期对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">日期对象是由新的Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>构造函数创建的

格林威治时间（<span class="token number">1970</span>年<span class="token number">1</span>月<span class="token number">1</span>日<span class="token number">0</span>点）	取的是本地系统的时间

<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  日期对象

<span class="token comment">//实例化时间对象</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Wed Jun 10 2020 16:37:06 GMT+0800 (中国标准时间)</span>

<span class="token comment">//toGMTString() 方法可根据格林威治时间 (GMT) 把 Date 对象转换为字符串，并返回结果。</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置时间" tabindex="-1"><a class="header-anchor" href="#设置时间" aria-hidden="true">#</a> 设置时间</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.字符串形式设置时间</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2020-07-08 10:00:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.数字形式设置时间 new Date(year,month,day,hours,minutes,seconds)</span>
<span class="token comment">//注意设置月份的时候需要 -1，比如想设置7月份，那么 7-1=6月份</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3.时间戳形式设置时间  1593483052000毫秒</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1593483052000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4.单独设置 年月日 时分秒</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set-方法" tabindex="-1"><a class="header-anchor" href="#set-方法" aria-hidden="true">#</a> set()方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>单独设置 年月日 时分秒 ↓↓↓
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>setDate()</td><td>以数值（1-31）设置日</td></tr><tr><td>setFullYear()</td><td>设置年（可选月和日）</td></tr><tr><td>setHours()</td><td>设置小时（0-23）</td></tr><tr><td>setMinutes()</td><td>设置分（0-59）</td></tr><tr><td>setMonth()</td><td>设置月（0-11）</td></tr><tr><td>setSeconds()</td><td>设置秒（0-59）</td></tr><tr><td>setMilliseconds()</td><td>设置毫秒（0-999）</td></tr><tr><td>setTime()</td><td>设置时间（从 1970 年 1 月 1 日至今的毫秒数）</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//setDate() 方法用于设置某个月的某一天。</span>

<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token comment">//Wed Jul 15 2020 18:45:30 GMT+0800 (中国标准时间)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取时间戳" tabindex="-1"><a class="header-anchor" href="#获取时间戳" aria-hidden="true">#</a> 获取时间戳</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JS</span>获取当前时间的时间戳

<span class="token comment">//第一种时间戳</span>
<span class="token comment">//获取从1970年1月1日距现在的毫秒数</span>
<span class="token keyword">var</span> miao1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//第二种时间戳</span>
<span class="token comment">//获取从1970年1月1日距现在的毫秒数</span>
<span class="token keyword">var</span> miao2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>js获取某个时间点的时间戳

<span class="token keyword">var</span> miao3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2020-3-14 11:30:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取系统时间" tabindex="-1"><a class="header-anchor" href="#获取系统时间" aria-hidden="true">#</a> 获取系统时间</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//先实例化时间对象</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 获取系统的年份</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取系统的月份 范围是(0-11)   0表示1月份，以此类推，所以获取的月份需要+1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// 获取系统的日期 范围是（1-31）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取系统的星期  范围是（0-6） 0表示星期天 1表示星期一，以此类推</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取系统的小时  范围是 （0-23）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取系统的分钟 范围是 （0-59）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 获取系统的秒钟 范围是 （0-59）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="math-对象" tabindex="-1"><a class="header-anchor" href="#math-对象" aria-hidden="true">#</a> Math 对象</h2><p>Math 对象用于执行 js 的数学任务</p><p>注意：Math 对象并不像 Date()，String()对象的类,因此没有构造函数 Math(),使用时无需加 new，无需创建，直接把 Math 作为对象使用就可以调用其所有属性和方法</p><h3 id="math-ceil-number-向上取整" tabindex="-1"><a class="header-anchor" href="#math-ceil-number-向上取整" aria-hidden="true">#</a> Math.ceil(number)向上取整</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3           0不会进阶 +1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.000001</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.0000000000000000000001</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3  小数点后面超过15位数，还是不会进阶</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-floor-number-向下取整" tabindex="-1"><a class="header-anchor" href="#math-floor-number-向下取整" aria-hidden="true">#</a> Math.floor(number)向下取整</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3      0不会降阶 -1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.000001</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.9999999999999999999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4  小数点后面超过15位数，还是会进阶</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-round-number-四舍五入" tabindex="-1"><a class="header-anchor" href="#math-round-number-四舍五入" aria-hidden="true">#</a> Math.round(number)四舍五入</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3      0不会降阶 -1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.4999999999999999999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4  小数点后面超过15位数，还是会进阶</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-random-获取随机数" tabindex="-1"><a class="header-anchor" href="#math-random-获取随机数" aria-hidden="true">#</a> Math.random() 获取随机数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>范围  <span class="token number">0</span> <span class="token operator">&lt;=</span> 随机数 <span class="token operator">&lt;</span> <span class="token number">1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 0.318642157089438</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-math-ceil-取整公式" tabindex="-1"><a class="header-anchor" href="#_1-math-ceil-取整公式" aria-hidden="true">#</a> 1.Math.ceil()取整公式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>最大值<span class="token operator">-</span>最小值<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>最小值<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">11</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;取到20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-math-floor-取整公式-建议用" tabindex="-1"><a class="header-anchor" href="#_2-math-floor-取整公式-建议用" aria-hidden="true">#</a> 2.Math.floor()取整公式--- 建议用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>最大值 <span class="token operator">-</span> 最小值 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> 最小值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="math-max-取最大值" tabindex="-1"><a class="header-anchor" href="#math-max-取最大值" aria-hidden="true">#</a> Math.max() -- 取最大值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>如果包含不能转换成数字的字符，那么返回值是 <span class="token number">NaN</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 100</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// NaN</span>

<span class="token comment">// ES5写法</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// (10,25,1,20,13,16,50,99)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 99</span>

<span class="token comment">// ES6写法  Math.max.apply()</span>
<span class="token comment">// ...arr  ES6扩展运算符</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 99</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-min-取最小值" tabindex="-1"><a class="header-anchor" href="#math-min-取最小值" aria-hidden="true">#</a> Math.min() -- 取最小值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>如果包含不能转换成数字的字符，那么返回值是 <span class="token number">NaN</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// -4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// NaN</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-abs-取绝对值" tabindex="-1"><a class="header-anchor" href="#math-abs-取绝对值" aria-hidden="true">#</a> Math.abs -- 取绝对值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="math-pow-x-的-y-次幂" tabindex="-1"><a class="header-anchor" href="#math-pow-x-的-y-次幂" aria-hidden="true">#</a> Math.pow() x 的 y 次幂</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 16 2的4次幂</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-sqrt-x-的平方根" tabindex="-1"><a class="header-anchor" href="#math-sqrt-x-的平方根" aria-hidden="true">#</a> Math.sqrt() x 的平方根</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>如果小于<span class="token number">0</span>，则返回 <span class="token number">NaN</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-对象中几个常见的常数" tabindex="-1"><a class="header-anchor" href="#math-对象中几个常见的常数" aria-hidden="true">#</a> Math 对象中几个常见的常数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">)</span> <span class="token comment">//输出结果为常数e即2.718281828459045</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为ln2即0.6931471805599453</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LN10</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为ln10即2.302585092994046</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为即1.4426950408889634</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">LOG10E</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为即0.4342944819032518</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为π即3.141592653589793...</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">SQRT1_2</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为0.5的平方根即0.7071067811865476</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">SQRT2</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为2的平方根即1.4142135623730951</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math-对象中常用的方法" tabindex="-1"><a class="header-anchor" href="#math-对象中常用的方法" aria-hidden="true">#</a> Math 对象中常用的方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span>返回 x 的绝对值。
<span class="token function">ceil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>对数进行上舍入。
<span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>对 x 进行下舍入。
<span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回 x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>n 中的最高值。
<span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回 x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>n中的最低值。
<span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回 x 的 y 次幂。
<span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回数的平方根。
<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回 <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">1</span> 之间的随机数。
<span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>四舍五入。
<span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回数的正弦。
<span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回数的余弦。
<span class="token function">tan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回角的正切。
<span class="token function">acos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回 x 的反余弦值。
<span class="token function">asin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回 x 的反正弦值。
<span class="token function">atan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>以介于 <span class="token operator">-</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span> 与 <span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span> 弧度之间的数值来返回 x 的反正切值。
<span class="token function">atan2</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回从 x <span class="token function">轴到点</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> 的角度（介于 <span class="token operator">-</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span> 与 <span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span> 弧度之间）。
<span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回 Ex 的指数。
<span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>返回数的自然对数（底为e）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bom-对象" tabindex="-1"><a class="header-anchor" href="#bom-对象" aria-hidden="true">#</a> BOM 对象</h2><div class="hint-container info"><p class="hint-container-title">Bom</p><p>BOM 的定义</p><p>Browser Object Model 即&quot;浏览器对象模型&quot;。浏览器页面初始化时，会在内存创建一个全局对象，用来描述当前窗口的属性和状态，这个全局对象被称为浏览器对象模型</p><p>DOM 的标准化组织是 W3C，JavaScript 的语法标准化组织是 ECMA，但是 BOM 没有官方标准，它最初是 Netscape 浏览器标准一部分，也就是说，对现代浏览器，每个浏览器都有自己的 BOM 实现方法，所以直接使用 BOM 会有兼容性问题</p></div><p>BOM 包含哪些内容</p><p>BOM 有一个核心对象 window，window 对象包含了 6 大核心</p><ul><li>document 文档对象</li><li>frames HTML 框架(基本淘汰)</li><li>history 页面的历史记录</li><li>location 页面的地址</li><li>navigator 浏览器的相关信息</li><li>screen 用户显示屏幕相关信息</li></ul><h3 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象" aria-hidden="true">#</a> window 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">BOM</span>的核心对象就是window，window对象也是<span class="token constant">BOM</span>的顶级对象，所有浏览器都支持window对象，它代表的是浏览器的窗口

 JavaScript的所有全局对象、全局方法和全局变量全都自动归为window对象的方法和属性，<span class="token operator">**</span>在调用这些方法和属性可以省略 window。<span class="token constant">DOM</span>也是window对象的属性

window对象有两个用来定义浏览器窗口大小的属性（两个属性返回以‘px’像素为单位的数值）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>innerWidth <span class="token comment">//返回浏览器可视窗口的宽度(包括滚动条宽度)</span>
window<span class="token punctuation">.</span>innerHeight <span class="token comment">//返回浏览器可视窗口的高度(包括滚动条高度)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>outerWidth <span class="token comment">//返回浏览器窗口的宽度(包括滚动条宽度)</span>
window<span class="token punctuation">.</span>outerHeight <span class="token comment">//返回浏览器窗口的高度(包括滚动条高度及浏览器工具栏的高度)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>获取可视化区域的宽高，以上四个window的属性对于<span class="token constant">IE9</span>以下浏览器不支持，需要写兼容写法

<span class="token keyword">var</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> window<span class="token punctuation">.</span>innerWidth

<span class="token keyword">var</span> clientHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> window<span class="token punctuation">.</span>innerHeight
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="window-的方法" tabindex="-1"><a class="header-anchor" href="#window-的方法" aria-hidden="true">#</a> window 的方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>要打开窗口的路径，打开的方式（_blank 新窗口 _self 原窗口 _parent 父窗口  name 指定在某个窗口打开），规定打开窗口的样式（窗口的大小，样式之间用逗号连接，不用空格），是否在history列表中替代当前页面<span class="token punctuation">)</span>

window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.jd.com/&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;width = 400px,height = 200px&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;replace&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            关闭当前窗口
window<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       移动窗口到特定的位置
window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       修改窗口大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="window-三个弹窗" tabindex="-1"><a class="header-anchor" href="#window-三个弹窗" aria-hidden="true">#</a> window 三个弹窗</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>alert   <span class="token operator">--</span>   警告框  （当你需要确保某个信息传递给用户时，使用Alert box，用户需要点击“确定”来继续下一个步骤，没有返回值（<span class="token keyword">undefined</span>））

confirm  <span class="token operator">--</span> 确认框   （当你需要用户验证或者接受某个信息时，使用Confirm   box，用户需要点击“确定”或者“取消”来继续下一个步骤，点击“确定”，返回<span class="token boolean">true</span>，点击“取消”，返回<span class="token boolean">false</span>）

prompt  <span class="token operator">--</span> 提示框  （当你希望用户进入页面前，先输入某个信息时，使用Prompt     box，用户需要输入一个值，然后点击“确定”或者“取消”来继续下一个步骤，如果用户点击“确定”，返回用户输入的值（永远都是字符串类型），如果用户点击“取消”，返回<span class="token keyword">null</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> myPage

btn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myPage <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width = 400px,height = 200px&#39;</span><span class="token punctuation">)</span>
  myPage<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;这是我的窗口&lt;/p&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

btn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myPage<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
  myPage<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

btn<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myPage<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
  myPage<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

btn<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myPage<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="document-对象" tabindex="-1"><a class="header-anchor" href="#document-对象" aria-hidden="true">#</a> document 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>渲染引擎在解析<span class="token constant">HTML</span>对象时，会生成一歌document对象，即文档对象，它是<span class="token constant">HTML</span>文档的根节点，每一个元素都会生成对应的<span class="token constant">DOM</span>对象，由于元素之间的层级关系，整个<span class="token constant">HTML</span>代码解析结束之后，会生成一歌不同节点组成的树形结构，成<span class="token constant">DOM</span>树，document用于描述<span class="token constant">DOM</span>树的状态和属性，并提供很多操作<span class="token constant">DOM</span>的<span class="token constant">API</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="frames-对象" tabindex="-1"><a class="header-anchor" href="#frames-对象" aria-hidden="true">#</a> frames 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>frames指<span class="token constant">HTML</span>子框架，即在浏览器里嵌入另一个窗口，父框架和子框架拥有独立的作用域和上下文

注意：元素frame在<span class="token constant">HTML5</span>中已废弃
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="history-对象" tabindex="-1"><a class="header-anchor" href="#history-对象" aria-hidden="true">#</a> history 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history对象包含浏览器的历史记录，这些历史记录以栈的形式保存，页面前进则入栈，页面返回则出栈
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>它是一个只读对象，为了保护用户的隐私，JavaScript在获取这个对象时会受到限制，history对象不允许未授权代码访问会话历史中的其他页面地址，但可以到货到其他会话历史指向的页面。未授权代码无法清除history，也不能禁止后退<span class="token operator">/</span>前进的功能
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history的三个方法

<span class="token operator">-</span> history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           跳转到历史记录中的前一个链接 <span class="token operator">--</span>  回退
<span class="token operator">-</span> history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     跳转到历史记录中的后一个链接 <span class="token operator">--</span>  前进
<span class="token operator">-</span> history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               上面两个方法的集合
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     表示刷新当前页面
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    表示跳转到历史记录中的前一个链接 <span class="token operator">--</span>  回退  <span class="token function">相当于back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     表示跳转到历史记录中的后一个链接 <span class="token operator">--</span>  前进  <span class="token function">相当于forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">注：go</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>  参数可以是任意数字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="location-对象" tabindex="-1"><a class="header-anchor" href="#location-对象" aria-hidden="true">#</a> location 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location对象可以获取当前页面地址以及重定向到一个新页面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>location属性

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href    返回当前页面的地址<span class="token punctuation">,</span>当前页面打开地址        <span class="token operator">--</span>        重点掌握

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash    <span class="token function">返回当前页面的hash值</span><span class="token punctuation">(</span>#后面的字符串<span class="token punctuation">)</span>

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname  返回当前页面的域名

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname  返回当前页面的路径和文件名

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol     返回网页使用的协议（http<span class="token operator">:</span> 还是 https<span class="token operator">:</span> ）

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>port   返回当前页面的端口，如果页面使用的是默认端口（http<span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token number">443</span>）   则大多数浏览器会显示为<span class="token number">0</span>或者不显示

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>assgin  加载一个新的文档
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2</span><span class="token punctuation">.</span>location方法

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     重载页面 <span class="token operator">--</span> 刷新页面	  <span class="token operator">--</span>        重点掌握

window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   重定向页面 <span class="token operator">--</span> 跳转到新的页面  <span class="token operator">--</span>        重点掌握
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="navigator-对象" tabindex="-1"><a class="header-anchor" href="#navigator-对象" aria-hidden="true">#</a> navigator 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator对象是一个只读对象，它是描述浏览器本身的信息，包括浏览器的名称、版本、语言、系统平台、用户特性字符串等信息

<span class="token function">navigator对象有很多获得浏览器信息的方法，但是大多数不提倡使用，因为他们返回的数据并不准确</span><span class="token punctuation">(</span>如appCodeName<span class="token punctuation">,</span>appName<span class="token punctuation">,</span>platform等<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator对象的属性

<span class="token operator">-</span> navigator<span class="token punctuation">.</span>appName    <span class="token function">返回浏览器名称</span><span class="token punctuation">(</span><span class="token constant">IE11</span><span class="token punctuation">,</span> chrome<span class="token punctuation">,</span> firefox<span class="token punctuation">,</span> safari都返回Netscape<span class="token punctuation">)</span>

<span class="token operator">-</span> navigator<span class="token punctuation">.</span>appCodeName    <span class="token function">返回当前浏览器的内核</span><span class="token punctuation">(</span>chrome<span class="token punctuation">,</span> <span class="token constant">IE</span><span class="token punctuation">,</span> safari和Opera都返回Mozilla<span class="token punctuation">)</span>

<span class="token operator">-</span> navigator<span class="token punctuation">.</span>userAgent    返回由客户机发送服务器的user<span class="token operator">-</span>agent 头部的值  <span class="token operator">--</span>   重点掌握
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getBroswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.通过navigator.userAgent获取浏览器信息  ---  字符串</span>
  <span class="token keyword">var</span> userAgent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent
  <span class="token comment">// 2.通过字符串的方法查找对应的浏览器的名称Chrome  Firefox  Safari</span>
  <span class="token comment">// 3.if判断是哪个浏览器</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Chrome&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Chrome浏览器&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Firefox&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Firefox浏览器&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Safari&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Safari浏览器&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
    userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;OPR&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>
    userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Opera&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Opera浏览器&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;IE浏览器&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getBroswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="screen-对象" tabindex="-1"><a class="header-anchor" href="#screen-对象" aria-hidden="true">#</a> screen 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>screen对象提供了用户显示屏幕的相关属性，比如显示屏的宽度，高度，可用宽度，可用高度

screen对象的属性 <span class="token operator">-</span> 显示屏的分辨率

<span class="token operator">--</span>screen<span class="token punctuation">.</span>width     显示屏的宽度

<span class="token operator">--</span>screen<span class="token punctuation">.</span>height    显示屏的高度

<span class="token operator">--</span>screen<span class="token punctuation">.</span>availWidth   屏幕的可用宽度

<span class="token operator">--</span>screen<span class="token punctuation">.</span>availHeight  屏幕的可用高度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><h3 id="定义正则表达式" tabindex="-1"><a class="header-anchor" href="#定义正则表达式" aria-hidden="true">#</a> 定义正则表达式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>修饰符

修饰符用来执行区分大小写和全局匹配和多行匹配 ↓↓
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配</td></tr><tr><td>g</td><td>是否执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</td></tr><tr><td>m</td><td>执行多行匹配</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>字面量定义

<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token operator">/</span>patten<span class="token operator">/</span>modifiers<span class="token punctuation">;</span>

<span class="token comment">//patten(模式): 描述了表达式的规则（模式）</span>
<span class="token comment">//modifiers(修饰符) 修饰符用&quot;/&quot;隔开，也可以合并在一起</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>构造函数定义

<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>patten<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>

<span class="token comment">//patten(模式): 描述了表达式的规则（模式）</span>
<span class="token comment">//modifiers(修饰符)</span>

<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="regexp-对象的方法" tabindex="-1"><a class="header-anchor" href="#regexp-对象的方法" aria-hidden="true">#</a> RegExp 对象的方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>RegExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;字符串&#39;</span><span class="token punctuation">)</span>
检索字符串中指定的值，返回<span class="token boolean">true</span>或<span class="token boolean">false</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;sdfdsfdsfsdfdsgg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>RegExp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;字符串&#39;</span><span class="token punctuation">)</span>
检索字符串中第一个指定的值（正则），返回的是一个数组，检索不到返回<span class="token keyword">null</span>
数组中包含：第一个匹配到的值<span class="token punctuation">,</span>对应的下标 <span class="token punctuation">,</span>字符串

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;sdfdsfdsfsdfdsgg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//[&quot;d&quot;, index: 1, input: &quot;sdfdsfdsfsdfdsgg&quot;, groups: undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>RegExp<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span>modifier<span class="token punctuation">)</span>
在<span class="token number">1.5</span>版本中已废弃，编译正则表达式

<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> patt <span class="token operator">=</span> reg2<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//   /l/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>patt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-对象的方法" tabindex="-1"><a class="header-anchor" href="#string-对象的方法" aria-hidden="true">#</a> String 对象的方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>
返回与正则表达式第一个相匹配的值对应的下标，如果没有找到，返回 <span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello word&quot;</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>reg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>
找到一个或多个正则表达式的匹配的值，返回的是数组，如有没有，返回<span class="token keyword">null</span>

数组由匹配的值组成

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello worood&quot;</span>
<span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//[&quot;o&quot;, &quot;o&quot;, &quot;o&quot;, &quot;o&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>正则表达式，替换的字符串<span class="token punctuation">)</span>
替换与正则表达式匹配的子字符串，返回新字符串，不改变原字符串

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello word&quot;</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg2<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hellb wbrd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>
把字符串分割为字符串数组，返回数组，不改变原字符串

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello word&quot;</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;o&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>reg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//[&quot;hell&quot;, &quot; w&quot;, &quot;rd&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">正2副</span><span class="token punctuation">(</span>字符串<span class="token punctuation">)</span><span class="token number">4</span>

<span class="token function">正则的方法，正则写方法前</span><span class="token punctuation">(</span>字符串为参数<span class="token punctuation">)</span>；

字符串的方法，字符串写前面（正则为参数）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="普通字符" tabindex="-1"><a class="header-anchor" href="#普通字符" aria-hidden="true">#</a> 普通字符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="特殊字符" tabindex="-1"><a class="header-anchor" href="#特殊字符" aria-hidden="true">#</a> 特殊字符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>所谓特殊字符，就是一些有特殊含义的字符

正则表达式按大类分普通字符和特殊字符，按功能分括号，元字符，限定符（量词）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配 _ 字符，请使用 _。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td>.</td><td>匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td>[ ]</td><td>匹配某个范围内的字符 [0-9] [a-z]。要匹配 [，请使用 [。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td>\\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， &#39;n&#39; 匹配字符 &#39;n&#39;。&#39;\\n&#39; 匹配换行符。序列 &#39;&#39; 匹配 &quot;&quot;，而 &#39;(&#39; 则匹配 &quot;(&quot;。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td>{</td><td>限定每次匹配的字符串长度。要匹配 {，请使用 {。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h4 id="中括号详情" tabindex="-1"><a class="header-anchor" href="#中括号详情" aria-hidden="true">#</a> 中括号详情</h4><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符</td></tr><tr><td>[0-9]</td><td>查找任何 0 至 9 的数字</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符 - 所有的大小写英文字母</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符</td></tr><tr><td>[^adgk]</td><td>查找给定集合外的任何字符</td></tr><tr><td>(red|blue|green)</td><td>查找任何指定的选项</td></tr></tbody></table><h3 id="非打印字符" tabindex="-1"><a class="header-anchor" href="#非打印字符" aria-hidden="true">#</a> 非打印字符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\\cx</td><td>匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &#39;c&#39; 字符。</td></tr><tr><td>\\f</td><td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td></tr><tr><td>\\n</td><td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td></tr><tr><td>\\r</td><td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td></tr><tr><td>\\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td>\\S</td><td>匹配任何非空白字符。等价于。</td></tr><tr><td>\\t</td><td>匹配一个制表符。等价于 \\x09 和 \\cI。</td></tr><tr><td>\\v</td><td>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td></tr></tbody></table><h3 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>元字符（Metacharacter）是拥有特殊含义的字符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>查找单个字符，除了换行（\\n）和行结束符</td></tr><tr><td>\\w</td><td>查找单词字符 -- 相当于大小写字母加 0-9 数字加下划线_加<span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#39;_&#39; at position 16: 符号  \\[A-z][0-9]_̲" style="color:#cc0000;"><span class="cjk_fallback">符号 \\[A-z][0-9]_</span></span></td></tr><tr><td>\\W</td><td>查找非单词字符</td></tr><tr><td>\\d</td><td>查找数字 -- 相当于 [0-9]</td></tr><tr><td>\\D</td><td>查找非数字字符</td></tr><tr><td>\\s</td><td>查找空白字符</td></tr><tr><td>\\S</td><td>查找非空白字符</td></tr><tr><td>\\b</td><td>匹配单词边界</td></tr><tr><td>\\B</td><td>匹配非单词边界</td></tr><tr><td>\\0</td><td>查找 NULL 字符</td></tr><tr><td>\\n</td><td>查找换行符</td></tr><tr><td>\\f</td><td>查找换页符</td></tr><tr><td>\\r</td><td>查找回车符</td></tr><tr><td>\\t</td><td>查找制表符</td></tr><tr><td>\\v</td><td>查找垂直制表符</td></tr><tr><td>\\xxx</td><td>查找以八进制 xxx 规定的字符</td></tr><tr><td>\\xdd</td><td>查找以十六进制数 dd 规定的字符</td></tr><tr><td>\\uxxxx</td><td>查找以十六进制数 xxx 规定的 Unicode 字符</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>匹配中文

<span class="token punctuation">[</span>\\u4E00<span class="token operator">-</span>\\u9FA5\\\\s<span class="token punctuation">]</span><span class="token operator">+</span>   多个汉字，包括空格

<span class="token punctuation">[</span>\\u4E00<span class="token operator">-</span>\\u9FA5<span class="token punctuation">]</span><span class="token operator">+</span>      多个汉字，不包括空格

<span class="token punctuation">[</span>\\u4E00<span class="token operator">-</span>\\u9FA5<span class="token punctuation">]</span>       一个汉字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则表达式-贪婪、懒惰、占有" tabindex="-1"><a class="header-anchor" href="#正则表达式-贪婪、懒惰、占有" aria-hidden="true">#</a> 正则表达式：贪婪、懒惰、占有</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>贪婪模式<span class="token operator">--</span>量词会首先匹配整个字符串，尝试匹配时，会尽可能选定更多的内容，量词首次匹配整个字符串，如果失败则回退一个字符后再尝试，这个过程叫回溯，它每次回退一个字符，直到找到匹配内容或者没有字符尝试为止  （<span class="token operator">+</span>  ，<span class="token operator">*</span>）

懒惰模式<span class="token operator">--</span>它从目标的起始位置开始尝试寻找匹配，每次检查字符串的一个字符，最后他会尝试匹配整个字符串，要是一个量词成为懒惰的，必须在普通量词的后面加一个问号？ （<span class="token operator">+</span>？  <span class="token operator">*</span>？）

占有量词<span class="token operator">--</span>它会覆盖整个目标然后尝试寻找匹配内容，但他只尝试一次，不会回溯。占有量词是在普通量词之后添加一个加号<span class="token operator">+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则表达式-优先级" tabindex="-1"><a class="header-anchor" href="#正则表达式-优先级" aria-hidden="true">#</a> 正则表达式 - 优先级</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">-</span> 正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似
<span class="token operator">-</span> 相同优先级的会从左到右进行运算，不同的优先级运算先高后低
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>依次从最高到最低 <span class="token operator">-</span> 正则表达式运算符的优先级顺序

<span class="token number">1.</span> \\  <span class="token operator">=&gt;</span> 转义符
<span class="token number">2.</span>（），（？）<span class="token punctuation">,</span>（？<span class="token operator">=</span>），<span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token operator">=&gt;</span> 小括号和中括号
<span class="token number">3.</span> <span class="token operator">*</span>  <span class="token operator">+</span> <span class="token operator">?</span> <span class="token punctuation">{</span>n<span class="token punctuation">}</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span>  <span class="token operator">=&gt;</span> 量词限定符
<span class="token number">4.</span> <span class="token operator">^</span>    <span class="token parameter">$</span>  <span class="token operator">=&gt;</span> 量词限定符
<span class="token number">5.</span> <span class="token operator">|</span>   <span class="token operator">=&gt;</span>  ‘或’操作
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dom-操作" tabindex="-1"><a class="header-anchor" href="#dom-操作" aria-hidden="true">#</a> DOM 操作</h2><blockquote><p>DOM 的定义：Document Object Model 文档对象模型</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>节点Node

节点是构成我们网页的最基本的组成部分，网页中的每一个部分都可以称为是一个节点。例如： html标签、属性、文本、注释、整个文档等都是一个节点。

文档节点，表示的是整个html
元素节点，表示的是html中的标签
属性节点，表示的是html标签中的属性
文本节点，表示的是html标签中的内容文本 （文本节点包含文字、空格、换行等）

在 DOM 中，节点使用 node 来表示,不同类型的节点具有不同的属性和方法

标签 由尖括号包围的关键词,比如 &lt;html&gt;

元素

元素以开始标签起始,结束标签终止。
元素的内容是开始标签与结束标签之间的内容
某些 HTML 元素具有空内容（empty content）
空元素在开始标签中进行关闭（以开始标签的结束而结束）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="节点属性" tabindex="-1"><a class="header-anchor" href="#节点属性" aria-hidden="true">#</a> 节点属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>一般地，节点至少拥有的三个基本属性：

<span class="token number">1.</span><span class="token function">nodeName</span><span class="token punctuation">(</span>节点名称<span class="token punctuation">)</span><span class="token operator">--</span>返回节点名称。在元素节点中，返回名称基本都是大写，只有\\<span class="token operator">&lt;</span>svg<span class="token operator">&gt;</span>标签返回的是小写

<span class="token number">2.</span><span class="token function">nodeValue</span><span class="token punctuation">(</span>节点值<span class="token punctuation">)</span><span class="token operator">--</span>返回一个字符串，表示当前节点本身的文本值，这个属性可读写

<span class="token number">3.</span><span class="token function">nodeType</span><span class="token punctuation">(</span>节点类型<span class="token punctuation">)</span><span class="token operator">--</span>返回数字
元素节点 	返回值 <span class="token number">1</span>
属性节点 	返回值 <span class="token number">2</span>
文本节点 	返回值 <span class="token number">3</span>
注释节点 	返回值 <span class="token number">8</span>
文档节点	返回值 <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Node Types文档、元素、属性以及 <span class="token constant">HTML</span> 或 <span class="token constant">XML</span> 文档的其他方面拥有不同的节点类型。
存在 <span class="token number">12</span> 种不同的节点类型，其中可能会有不同节点类型的子节点 ↓↓
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>节点类型</th><th>描述</th><th>子节点</th><th></th></tr></thead><tbody><tr><td>1</td><td>Element</td><td>代表元素</td><td>Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference</td></tr><tr><td>2</td><td>Attr</td><td>代表属性</td><td>Text, EntityReference</td></tr><tr><td>3</td><td>Text</td><td>代表元素或属性中的文本内容。</td><td>None</td></tr><tr><td>4</td><td>CDATASection</td><td>代表文档中的 CDATA 部分（不会由解析器解析的文本）。</td><td>None</td></tr><tr><td>5</td><td>EntityReference</td><td>代表实体引用。</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td>6</td><td>Entity</td><td>代表实体。</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td>7</td><td>ProcessingInstruction</td><td>代表处理指令。</td><td>None</td></tr><tr><td>8</td><td>Comment</td><td>代表注释。</td><td>None</td></tr><tr><td>9</td><td>Document</td><td>代表整个文档（DOM 树的根节点）。</td><td>Element, ProcessingInstruction, Comment, DocumentType</td></tr><tr><td>10</td><td>DocumentType</td><td>向为文档定义的实体提供接口</td><td>None</td></tr><tr><td>11</td><td>DocumentFragment</td><td>代表轻量级的 Document 对象，能够容纳文档的某个部分</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td>12</td><td>Notation</td><td>代表 DTD 中声明的符号。</td><td>None</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>span<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文本节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">//获取span元素节点</span>
  <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>

  <span class="token comment">//获取元素内部第一个子节点</span>
  <span class="token keyword">var</span> text <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment">//&quot;文本节点&quot;</span>

  <span class="token comment">//获取元素id属性</span>
  <span class="token keyword">var</span> property <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span>

  <span class="token comment">//nodeType</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是元素节点的nodeType返回值：&#39;</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token comment">//元素节点返回1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是文本节点的nodeType返回值：&#39;</span> <span class="token operator">+</span> text<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token comment">//文本节点返回3</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是属性节点的nodeType返回值：&#39;</span> <span class="token operator">+</span> property<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token comment">//属性节点返回2</span>

  <span class="token comment">// nodeName</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是元素节点的nodeName返回值：&#39;</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span> <span class="token comment">//返回的标签名SPAN,注意是大写的</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是文本节点的nodeName返回值：&#39;</span> <span class="token operator">+</span> text<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span> <span class="token comment">//返回的#text</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是属性节点的nodeName返回值：&#39;</span> <span class="token operator">+</span> property<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span> <span class="token comment">//返回的是属性名，这里是id</span>

  <span class="token comment">// nodeValue</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是元素节点的nodeValue返回值：&#39;</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span> <span class="token comment">//本身就没有意义，这里是试验下的，返回的是null</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是文本节点的nodeValue返回值：&#39;</span> <span class="token operator">+</span> text<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span> <span class="token comment">//返回的是文本值  文本节点</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是属性节点的nodeValue返回值：&#39;</span> <span class="token operator">+</span> property<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span> <span class="token comment">//返回的是属性值，这里是id的属性值span</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取整个元素" tabindex="-1"><a class="header-anchor" href="#获取整个元素" aria-hidden="true">#</a> 获取整个元素</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;tagName&#39;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;className&#39;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">//返回带有指定名称的对象的集合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>上面<span class="token number">4</span>种和下面<span class="token number">2</span>种获取元素的区别在于：

↑↑<span class="token operator">--</span>上面<span class="token number">4</span>种可以获取页面中静态的或者动态添加的元素
↓↓<span class="token operator">--</span>下面<span class="token number">2</span>种只能获取页面中静态的元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#id&#39;</span> <span class="token operator">||</span> <span class="token string">&#39;.className&#39;</span> <span class="token operator">||</span> <span class="token string">&#39;tagName&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 获取单个元素</span>

document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.className&#39;</span> <span class="token operator">||</span> <span class="token string">&#39;tagName&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 获取多个元素(集合)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取元素的属性节点" tabindex="-1"><a class="header-anchor" href="#获取元素的属性节点" aria-hidden="true">#</a> 获取元素的属性节点</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>元素<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span><span class="token string">&quot;属性名&quot;</span><span class="token punctuation">)</span>  例如<span class="token operator">:</span> <span class="token string">&quot;id class style&quot;</span>，等自定义属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取元素的属性值" tabindex="-1"><a class="header-anchor" href="#获取元素的属性值" aria-hidden="true">#</a> 获取元素的属性值</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>元素<span class="token punctuation">.</span>属性名	通过这个方法，<span class="token string">&quot;class&quot;</span> 和 <span class="token string">&quot;自定义属性&quot;</span> 是获取不到的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="元素的样式" tabindex="-1"><a class="header-anchor" href="#元素的样式" aria-hidden="true">#</a> 元素的样式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;以下方法只能读取不能设置&quot;</span>

window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>元素<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>属性  <span class="token operator">--</span> 不兼容<span class="token constant">IE8</span>及以下的浏览器<span class="token punctuation">,</span>第二个参数 <span class="token keyword">null</span>也可以写成元素的伪元素，比如<span class="token string">&#39;before&#39;</span>或者<span class="token string">&#39;after&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token punctuation">)</span><span class="token punctuation">;</span>

元素<span class="token punctuation">.</span>currentStyle<span class="token punctuation">.</span>属性  <span class="token operator">--</span>  兼容<span class="token constant">IE</span>浏览器<span class="token number">8</span>及以下的方法
<span class="token comment">//兼容封装</span>
<span class="token comment">//e.style:获取行内样式</span>
<span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> e<span class="token punctuation">.</span>currentStyle <span class="token operator">||</span> e<span class="token punctuation">.</span>style
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;设置元素样式&#39;</span>

<span class="token keyword">var</span> Box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>
Box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取父元素-父节点" tabindex="-1"><a class="header-anchor" href="#获取父元素-父节点" aria-hidden="true">#</a> 获取父元素/父节点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>parentElement  获取父元素
parentNode  	 获取父节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;parentElement&quot;</span>  和   <span class="token string">&quot;parentNode&quot;</span>  的区别

<span class="token number">1.</span><span class="token string">&quot;parentNode&quot;</span> 是<span class="token constant">W3C</span>标准，<span class="token string">&quot;parentElement&quot;</span> 针对<span class="token constant">IE</span>浏览器兼容
<span class="token number">2.</span>当父节点的类型不是元素节点的话，它的 <span class="token string">&quot;parentElement&quot;</span> 就会是 <span class="token keyword">null</span>
<span class="token number">3.</span>一般情况下 <span class="token string">&quot;parentNode&quot;</span> 可以取代 <span class="token string">&quot;parentElement&quot;</span> 的所有功能
<span class="token number">4.</span> <span class="token string">&quot;parentElement&quot;</span> 匹配的是 <span class="token string">&quot;parent&quot;</span> 为元素的情况，而 <span class="token string">&quot;parentNode&quot;</span> 匹配的则是 <span class="token string">&quot;paren&quot;</span> 为节点的情况

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//document对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>parentElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取子元素-子节点" tabindex="-1"><a class="header-anchor" href="#获取子元素-子节点" aria-hidden="true">#</a> 获取子元素/子节点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>只能获取子代，不能获取所有的后代

children<span class="token operator">--</span>获取元素内部所有的子元素<span class="token punctuation">,</span><span class="token function">获取到的是一个集合</span><span class="token punctuation">(</span>类数组<span class="token punctuation">)</span>，可以通过对应的下标获取对应的元素
firstElementChild<span class="token operator">--</span>获取元素内部第一个子元素
lastElemenChild<span class="token operator">--</span>获取元素内部最后一个子元素

childNodes<span class="token operator">--</span>获取元素内部所有的子节点
firstChild<span class="token operator">--</span>获取元素内部第一个子节点
lastChild<span class="token operator">--</span>获取元素内部最后一个子节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取兄弟元素-兄弟节点" tabindex="-1"><a class="header-anchor" href="#获取兄弟元素-兄弟节点" aria-hidden="true">#</a> 获取兄弟元素/兄弟节点</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>previousElementSibling<span class="token operator">--</span>获取元素上面的兄弟元素，如果没有返回 <span class="token keyword">null</span>
nextElementSibling<span class="token operator">--</span>获取元素下面的兄弟元素，如果没有返回 <span class="token keyword">null</span>

previousSibling<span class="token operator">--</span>获取元素上面的兄弟节点，如果没有返回 <span class="token keyword">null</span>
nextSibling<span class="token operator">--</span>获取元素下面的兄弟节点，如果没有返回 <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取子元素的个数" tabindex="-1"><a class="header-anchor" href="#获取子元素的个数" aria-hidden="true">#</a> 获取子元素的个数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>childElementCount<span class="token operator">--</span> <span class="token operator">-</span> 获取元素内部子元素的个数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取表单焦点元素" tabindex="-1"><a class="header-anchor" href="#获取表单焦点元素" aria-hidden="true">#</a> 获取表单焦点元素</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>activeElement<span class="token operator">--</span>返回文档中当前获得焦点的元素，默认是body
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span>
  box<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获得焦点</span>
  <span class="token comment">// box.children[0].blur();				// 失去焦点</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>activeElement<span class="token punctuation">)</span> <span class="token comment">// 返回当前获得焦点的元素</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取-设置节点的内容" tabindex="-1"><a class="header-anchor" href="#获取-设置节点的内容" aria-hidden="true">#</a> 获取/设置节点的内容</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>innerHTML<span class="token operator">--</span>获取<span class="token operator">/</span>设置指定节点的 元素内容，不包括元素节点，包括文本节点
innerText<span class="token operator">--</span>获取<span class="token operator">/</span>设置指定节点的 文本内容，不包括元素节点，包括文本节点

outerHTML<span class="token operator">--</span>获取<span class="token operator">/</span>设置指定节点的 元素内容，包括元素节点，包括文本节点
outerText<span class="token operator">--</span>获取<span class="token operator">/</span>设置指定节点的 文本内容，包括元素节点，包括文本节点

textContent<span class="token operator">--</span>获取<span class="token operator">/</span>设置指定节点及其所有后代的文本内容。包括元素节点，包括文本节点

<span class="token string">&quot;outerHTML / outerText ==&gt; div(box)不再是文档树的一部分，新内容替换了它。(不在页面中显示,但仍然在内存中)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom-增删改查" tabindex="-1"><a class="header-anchor" href="#dom-增删改查" aria-hidden="true">#</a> DOM 增删改查</h3><h4 id="dom-增加-创建新的节点" tabindex="-1"><a class="header-anchor" href="#dom-增加-创建新的节点" aria-hidden="true">#</a> DOM 增加 -- 创建新的节点</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>步骤：

<span class="token number">1.</span>创建元素
<span class="token keyword">var</span> 元素名 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;标签名&#39;</span><span class="token punctuation">)</span>

<span class="token number">2.</span>设置元素属性
document<span class="token punctuation">.</span><span class="token function">createAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;属性&#39;</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>创建属性节点
<span class="token function">setAttributeNode</span><span class="token punctuation">(</span><span class="token string">&#39;属性节点&#39;</span><span class="token punctuation">)</span>  <span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>添加属性节点
简写<span class="token operator">--</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;属性名&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;属性值&#39;</span><span class="token punctuation">)</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 创建并添加属性节点

<span class="token number">3.</span>插入元素节点
父节点<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>节点<span class="token punctuation">)</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>接受一个节点对象作为参数，将其作为最后一个子节点，插入到当前节点中。这个方法返回值就是插入的子节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>创建一个元素节点并给它添加一个属性节点

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>
  body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>

  <span class="token comment">// var src = document.createAttribute(&quot;src&quot;);</span>
  <span class="token comment">// src.nodeValue = &quot;bei.jpg&quot;;</span>
  <span class="token comment">// img.setAttributeNode(src);</span>

  img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bei.jpg&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-删除-删除节点" tabindex="-1"><a class="header-anchor" href="#dom-删除-删除节点" aria-hidden="true">#</a> DOM 删除 -- 删除节点</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token string">&#39;子节点&#39;</span><span class="token punctuation">)</span>  <span class="token operator">--</span> 移除已存在的子节点，删除节点必须知道谁是父节点，不能跨代删除节点

<span class="token number">2.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">--</span> 移除所有子节点及本身节点

<span class="token number">3.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;属性名&#39;</span><span class="token punctuation">)</span>  <span class="token operator">--</span> 删除属性

<span class="token number">4.</span><span class="token function">removeAttributeNode</span><span class="token punctuation">(</span><span class="token string">&#39;属性节点&#39;</span><span class="token punctuation">)</span> <span class="token operator">--</span> 删除属性节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-修改" tabindex="-1"><a class="header-anchor" href="#dom-修改" aria-hidden="true">#</a> DOM 修改</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>替换元素

<span class="token function">replaceChild</span><span class="token punctuation">(</span><span class="token string">&#39;替换的元素&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;被替换的元素&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2.</span>修改类名

用className  会覆盖     div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;demo blue&quot;</span>
用classList  不会覆盖   div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token literal-property property">classList下的方法</span><span class="token operator">:</span>

<span class="token operator">--</span>增加 <span class="token keyword">class</span>   <span class="token class-name">node<span class="token punctuation">.</span>classList<span class="token punctuation">.</span>add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">--</span>删除 <span class="token keyword">class</span>   <span class="token class-name">node<span class="token punctuation">.</span>classList<span class="token punctuation">.</span>remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">--</span>切换 <span class="token keyword">class</span>   <span class="token class-name">node<span class="token punctuation">.</span>classist<span class="token punctuation">.</span>toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">--</span>判断 <span class="token keyword">class</span>   <span class="token class-name">node<span class="token punctuation">.</span>classist<span class="token punctuation">.</span>contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-查找" tabindex="-1"><a class="header-anchor" href="#dom-查找" aria-hidden="true">#</a> DOM 查找</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>查找父元素  parentElement

<span class="token number">2.</span>查找子元素  <span class="token function">children</span><span class="token punctuation">(</span>返回类数组<span class="token punctuation">,</span>集合<span class="token punctuation">)</span>
<span class="token operator">--</span>first	<span class="token function">ElementChild</span><span class="token punctuation">(</span>返回第一个子元素<span class="token punctuation">)</span>
<span class="token operator">--</span>last	<span class="token function">ElementChild</span><span class="token punctuation">(</span>返回最后一个子元素<span class="token punctuation">)</span>

<span class="token number">3.</span>查找兄弟元素
<span class="token operator">--</span><span class="token function">previousElementSibling</span><span class="token punctuation">(</span>返回上一个元素<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token function">nextElementSibling</span><span class="token punctuation">(</span>返回下一个元素<span class="token punctuation">)</span>

<span class="token number">4.</span>查找属性 <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;属性名&#39;</span><span class="token punctuation">)</span>  <span class="token operator">--</span>  获取属性

<span class="token number">5.</span>查找属性 <span class="token function">getAttributeNode</span><span class="token punctuation">(</span><span class="token string">&#39;属性节点&#39;</span><span class="token punctuation">)</span>  <span class="token operator">--</span>  获取属性节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cssText可以复写属性

element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">&#39;width:500px;height:500px;color:red;......&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-的-dom-的四大家族" tabindex="-1"><a class="header-anchor" href="#js-的-dom-的四大家族" aria-hidden="true">#</a> js 的 DOM 的四大家族</h2><h3 id="client-家族" tabindex="-1"><a class="header-anchor" href="#client-家族" aria-hidden="true">#</a> client 家族</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>clientWidth<span class="token operator">--</span>获取自身元素的宽度（内容<span class="token operator">+</span>内边距），不包括边框和外边距，只能读取不能设置

<span class="token number">2</span><span class="token punctuation">.</span>clientHeight<span class="token operator">--</span>获取自身元素的高度（内容<span class="token operator">+</span>内边距），不包括边框和外边距，只能读取不能设置

<span class="token number">3</span><span class="token punctuation">.</span>clientLeft<span class="token operator">--</span>获取自身元素左边框的宽度，只能读取不能设置

<span class="token number">4</span><span class="token punctuation">.</span>clientTop<span class="token operator">--</span>获取自身元素上边框的宽度，只能读取不能设置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="offset-家族" tabindex="-1"><a class="header-anchor" href="#offset-家族" aria-hidden="true">#</a> offset 家族</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>offsetWidth<span class="token operator">--</span>获取自身元素的宽度（内容<span class="token operator">+</span>内边距<span class="token operator">+</span>边框），不包括外边距，只能读取不能设置

<span class="token number">2</span><span class="token punctuation">.</span>offsetHeight<span class="token operator">--</span>获取自身元素的高度（内容<span class="token operator">+</span>内边距<span class="token operator">+</span>边框），不包括外边距，只能读取不能设置

<span class="token number">3</span><span class="token punctuation">.</span>offsetLeft<span class="token operator">--</span>获取自身元素距离最近的带有定位属性父元素的左边距离，如果没有，找到body的距离，只能读取不能设置

<span class="token number">4</span><span class="token punctuation">.</span>offsetTop<span class="token operator">--</span>获取自身元素距离最近的带有定位属性父元素的上边距离，如果没有，找到body的距离，只能读取不能设置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scroll-家族" tabindex="-1"><a class="header-anchor" href="#scroll-家族" aria-hidden="true">#</a> scroll 家族</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>scrollWidth<span class="token operator">--</span>获取滚动元素的内容宽度（不包括边框，且需要去除滚动条的宽度）

<span class="token number">2</span><span class="token punctuation">.</span>scrollHeight<span class="token operator">--</span>获取滚动元素的内容高度（不包括边框，且需要去除滚动条的高度）

<span class="token number">3</span><span class="token punctuation">.</span>scrollLeft<span class="token operator">--</span>获取水平滚动条距内容左边的距离

<span class="token number">4</span><span class="token punctuation">.</span>scrollTop<span class="token operator">--</span>获取垂直滚动条距离内容顶部的距离（内容被卷入的长度）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一个js兼容性scrollTop</span>
<span class="token comment">//	谷歌||火狐||IE</span>
<span class="token keyword">var</span> scrollTop <span class="token operator">=</span>
  document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span>
  window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop

<span class="token keyword">function</span> <span class="token function">getScrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span>
    window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>关于scrollTop的兼容问题

<span class="token number">1</span>、各浏览器下 scrollTop的差异
<span class="token constant">IE6</span><span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">8</span>：
对于没有doctype声明的页面里可以使用
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop 来获取 scrollTop高度 ；
对于有doctype声明的页面则可以使用 document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop；
<span class="token literal-property property">Safari</span><span class="token operator">:</span>
safari 比较特别，有自己获取scrollTop的函数 ： window<span class="token punctuation">.</span>pageYOffset ；
<span class="token literal-property property">Firefox</span><span class="token operator">:</span>
火狐等等相对标准些的浏览器就省心多了，直接用 document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop ；

<span class="token number">2</span>、获取scrollTop值
完美的获取scrollTop 赋值短语 ：
<span class="token keyword">var</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>

通过这句赋值就能在任何情况下获得scrollTop 值。
仔细观察这句赋值，你发现啥了没？？
没错， 就是 window<span class="token punctuation">.</span><span class="token function">pageYOffset</span>  <span class="token punctuation">(</span>Safari<span class="token punctuation">)</span>   被放置在 <span class="token operator">||</span> 的中间位置。
因为当 数字<span class="token number">0</span> 与 undefine 进行 或运算时，系统默认返回最后一个值。即或运算中 <span class="token number">0</span> <span class="token operator">==</span> undefine <span class="token punctuation">;</span>
当页面滚动条刚好在最顶端，即scrollTop值为 <span class="token number">0</span> 时。  <span class="token constant">IE</span> 下 window<span class="token punctuation">.</span><span class="token function">pageYOffset</span>  <span class="token punctuation">(</span>Safari<span class="token punctuation">)</span> 返回为 undefine ，此时将window<span class="token punctuation">.</span><span class="token function">pageYOffset</span>  <span class="token punctuation">(</span>Safari<span class="token punctuation">)</span> 放在或运算最后面时， scrollTop 返回 undefine <span class="token punctuation">,</span>  undefine 用在接下去的运算就会报错咯。
而其他浏览器 无论 scrollTop 赋值或运算顺序如何都不会返回 undefine<span class="token punctuation">.</span>  可以安全使用<span class="token punctuation">.</span><span class="token punctuation">.</span>
所以说到头还是<span class="token constant">IE</span>的问题咯<span class="token punctuation">.</span> 杯具…
精神有点恍惚，不知道有没有表达清楚。
不过最后总结出来这句实验过<span class="token constant">OK</span>，大家放心使用；

<span class="token keyword">var</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="page-家族" tabindex="-1"><a class="header-anchor" href="#page-家族" aria-hidden="true">#</a> page 家族</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pageXOffset<span class="token operator">--</span>获取当前页面<span class="token constant">X</span>轴的滚动高度

pageYOffset<span class="token operator">--</span>获取当前页面<span class="token constant">Y</span>轴的滚动高度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="鼠标坐标" tabindex="-1"><a class="header-anchor" href="#鼠标坐标" aria-hidden="true">#</a> 鼠标坐标</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>clientX、clientY<span class="token operator">--</span>距离当前 body 可视区域的x，y坐标

<span class="token number">2</span><span class="token punctuation">.</span>pageX、pageY<span class="token operator">--</span>对于整个页面来说，包括了被卷去的body部分的长度

<span class="token number">3</span><span class="token punctuation">.</span>screenX、screenY<span class="token operator">--</span>距离当前电脑屏幕的x，y坐标

<span class="token number">4</span><span class="token punctuation">.</span>offsetX、offsetY<span class="token operator">--</span>相对于带有定位的父盒子的x，y坐标，不包括边框

<span class="token number">5</span><span class="token punctuation">.</span>x、y<span class="token operator">--</span>和screenX、screenY一样
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-的事件" tabindex="-1"><a class="header-anchor" href="#js-的事件" aria-hidden="true">#</a> js 的事件</h2><h3 id="事件分类" tabindex="-1"><a class="header-anchor" href="#事件分类" aria-hidden="true">#</a> 事件分类</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>鼠标事件

onclick                   单击
ondblckick                双击
onmouseover<span class="token operator">/</span>onmouseout    移入移出
onmouseenter<span class="token operator">/</span>onmouseleave 移入移出
onmousemove               在元素上移动（会一直触发）
onmousedown<span class="token operator">/</span>onmouseup     鼠标按下<span class="token operator">/</span>抬起
oncontextmenu             阻止右键菜单
onselectstart             阻止文本选中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2.</span>键盘事件

onkeydown  按键按下
onkeyup    按键抬起
onkeypress 按键按住不松手
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">3.</span>表单事件

onfocus    获取焦点
onblur	   失去焦点
onchange   表单value值改变时，且元素失去焦点
oninput	   用户输入时触发，该事件类似于onchange事件，不同之处在于oninput事件在元素值发生变化是立即触发，onchange在元素失去焦点时触发，另外一点不同是 onchange 事件可以可以作用于 <span class="token operator">&lt;</span>select<span class="token operator">&gt;</span>元素
onselect   在input文本框中的文本被选中时发生
onsubmit   表单提交时发生
onreset	   表单重置时发生
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">4.</span><span class="token constant">UI</span><span class="token function">事件</span><span class="token punctuation">(</span>用户交互有关的事件<span class="token punctuation">)</span>

onload    加载事件
onscroll  滚动条事件
onresize  窗口事件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">5.</span>滚轮事件

onmousewheel   鼠标滚轮事件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addWheel</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">wheel</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event
    <span class="token keyword">var</span> bDown <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bDown <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        bDown <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bDown <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        bDown <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>bDown<span class="token punctuation">)</span>
    <span class="token comment">// return false;</span>
    <span class="token comment">// oEvent.preventDefault&amp;&amp;oEvent.preventDefault();</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//判断是不是火狐</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;firefox&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//&#39;DOMMouseScroll&#39;只兼容火狐,必须用事件绑定;   DOM 2级</span>
    obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMMouseScroll&#39;</span><span class="token punctuation">,</span> wheel<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> wheel <span class="token comment">// DOM 0级</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//调用方法；</span>
<span class="token function">addWheel</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bDown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bDown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;现在是上滚动&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 写相对应的滚轮事件代码</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;现在是下滚动&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 写相对应的滚轮事件代码</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-的事件处理程序" tabindex="-1"><a class="header-anchor" href="#js-的事件处理程序" aria-hidden="true">#</a> js 的事件处理程序</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>事件：在js中事件指某种动作，比如click，dblclick

事件处理程序：响应某个事件的函数，比如btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>，元素支持的事件，都可以使用与响应事件处理程序同名的<span class="token constant">HTML</span>特性来指定
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="html-事件缺点" tabindex="-1"><a class="header-anchor" href="#html-事件缺点" aria-hidden="true">#</a> HTML 事件缺点</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>存在一定的时差，用户可能在页面一出现就触发相应的事件，但是事件处理程序尚不具备执行的条件。比如，button的click函数定义在button的下方，我们在函数未解析之前，就点击button，这样就会导致报错

<span class="token number">2.</span>这样的事件处理程序的作用域链在不同的浏览器中会导致不同结果，不同的js引擎遵循的标识符解析规则略有差异，很可能在访问非限定对象时出错

<span class="token number">3.</span><span class="token constant">HTML</span>与JavaScript代码的紧密耦合，如果要更换事件或者事件处理程序就需要更改两个地方，非常不方便
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-0-级事件缺点" tabindex="-1"><a class="header-anchor" href="#dom-0-级事件缺点" aria-hidden="true">#</a> DOM 0 级事件缺点</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>在JavaScript中通过on的形式绑定的事件，它有一个缺点是如果多次给同一个元素绑定同一个事件，那么后面的事件就会覆盖前面的事件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">DOM0</span>级事件解除绑定    把这个绑定的事件赋值为<span class="token keyword">null</span>

h1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-2-级" tabindex="-1"><a class="header-anchor" href="#dom-2-级" aria-hidden="true">#</a> DOM 2 级</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">DOM2</span>级事件处理程序定义了两个方法，用于添加事件处理程序和删除事件处理程序的操作

<span class="token operator">-</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;事件名称&quot;</span>，事件处理程序的函数名，Boolean<span class="token punctuation">)</span>         添加事件
<span class="token operator">-</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;事件名称&#39;</span>，事件处理程序的函数名，Boolean<span class="token punctuation">)</span>      删除事件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>所有<span class="token constant">DOM</span>节点都包含这两个方法，并且他们接收<span class="token number">3</span>个参数

<span class="token number">1.</span>要处理的事件名
<span class="token number">2.</span>事件处理程序的函数
<span class="token number">3.</span>布尔值，默认值<span class="token boolean">false</span>，布尔值如果为<span class="token boolean">true</span>，表示在捕获阶段指向事件处理程序，如果为<span class="token boolean">false</span>，表示在冒泡阶段调用事件处理程序
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">使用addEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>注意事项

<span class="token number">1.</span><span class="token function">使用addEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">添加事件，必须使用removeEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>才能移除

<span class="token number">2.</span><span class="token function">事件处理程序的函数必须是命名函数，不然使用removeEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>移除不掉

对于<span class="token constant">IE8</span>及<span class="token constant">IE8</span>以下浏览器来说，他们没有上述的两个方法<span class="token punctuation">,</span>但是提供了 attachEvent 和 detachEvent 两个方法

这个两个只需要传递两个参数：第一个参数事件程序名称，第二个参数事件程序处理函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 跨浏览器事件处理程序的兼容写法：</span>
<span class="token comment">// 添加事件</span>
<span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 非IE8以上的浏览器</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//onclick,fn</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    element<span class="token punctuation">[</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> fn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 移除事件</span>
<span class="token keyword">function</span> <span class="token function">removeEvent</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 非IE8以上的浏览器</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//onclick,fn</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    element<span class="token punctuation">[</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-的事件流" tabindex="-1"><a class="header-anchor" href="#js-的事件流" aria-hidden="true">#</a> js 的事件流</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>事件流：页面触发一个事件时，会按照一定的顺序来响应事件，事件的响应过程称为事件流

<span class="token literal-property property">事件流分为三大阶段</span><span class="token operator">:</span>

<span class="token number">1.</span>捕获阶段：事件会从docuemt开始，一级一级往里传递，如果在传递的过程中<span class="token constant">DOM</span>节点有绑定的捕获类型的处理函数，就会执行
<span class="token number">2.</span>目标阶段：目标元素正在触发事件处理函数的阶段
<span class="token number">3.</span>冒泡阶段：目标元素从里到外开始，一级一级往外传递，如果在传递的过程中<span class="token constant">DOM</span>节点有绑定的冒泡类型的处理函数，就会执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-的事件对象-event" tabindex="-1"><a class="header-anchor" href="#js-的事件对象-event" aria-hidden="true">#</a> js 的事件对象 Event</h3><div class="hint-container info"><p class="hint-container-title">事件对象</p><p>Event 对象代表事件的状态，比如事件在其中发的元素，键盘按键的状态，鼠标的位置，鼠标的按钮的状态</p><p>什么时候会产生 Event 对象呢？</p><p>例如：当用户单击某个元素的时候，这个元素绑定的事件就会触发</p><p>该事件的本质上就是一个函数，而该函数的形参接收一个 Event 对象</p><p>事件通常与函数结合，函数不会在事件发生前被执行。</p><p>在触发事件的函数里，会接收一个 Event 对象，通过该对象，我们可以得到需要的参数，比如键盘按键的状态，鼠标的位置，鼠标的按钮的状态，或者阻止浏览器默认行为，或者事件的冒泡等</p></div><ol><li>js 的事件对象 Event ，IE9 以下浏览器兼容写法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>阻止默认行为，IE9 以下浏览器兼容写法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//一般写法</span>
event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//IE9及以上写法</span>
event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//IE9以下写法</span>

<span class="token comment">//兼容写法</span>
<span class="token comment">//console.log(event.preventDefault);goole  fn(true)   IE undefined(false)</span>
event<span class="token punctuation">.</span>preventDefault <span class="token operator">?</span> event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>阻止事件冒泡，E9 以下浏览器兼容写法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//一般写法</span>
event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//IE9及以上写法</span>
event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// IE9以下兼容写法</span>

<span class="token comment">//兼容写法</span>
<span class="token comment">//console.log(event.stopPropagation); goole fn(true   IE undefined(false)</span>
event<span class="token punctuation">.</span>stopPropagation <span class="token operator">?</span> event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块重定向" tabindex="-1"><a class="header-anchor" href="#模块重定向" aria-hidden="true">#</a> 模块重定向</h2><blockquote><p>举个例子，假如我们有如下层次结构：</p></blockquote><p><code>childModule1.js</code>: 导出 <code>myFunction</code> 和 <code>myVariable</code></p><p><code>childModule2.js</code>: 导出 <code>myClass</code></p><p><code>parentModule.js</code>: 作为聚合器（不做其他事情）</p><p>顶层模块：调用 <code>parentModule.js</code> 的导出项</p><p>你的代码看起来应该像这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// childModule1.js 中</span>
<span class="token keyword">let</span> myFunction <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span> <span class="token comment">// assign something useful to myFunction</span>
<span class="token keyword">let</span> myVariable <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span> <span class="token comment">// assign something useful to myVariable</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>myFunction<span class="token punctuation">,</span> myVariable<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// childModule2.js 中</span>
<span class="token keyword">let</span> myClass <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span> <span class="token comment">// assign something useful to myClass</span>
<span class="token keyword">export</span> myClass<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parentModule.js 中</span>
<span class="token comment">// 仅仅聚合 childModule1 和 childModule2 中的导出</span>
<span class="token comment">// 以重新导出他们</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> myFunction<span class="token punctuation">,</span> myVariable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;childModule1.js&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> myClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;childModule2.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 顶层模块中</span>
<span class="token comment">// 我们可以从单个模块调用所有导出，因为 parentModule 事先</span>
<span class="token comment">// 已经将他们“收集”/“打包”到一起</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> myFunction<span class="token punctuation">,</span> myVariable<span class="token punctuation">,</span> myClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;parentModule.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,339),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Basics.html.vue"]]);export{r as default};
